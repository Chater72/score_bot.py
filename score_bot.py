import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
from dotenv import load_dotenv
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_API_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Environment Variables")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SCORES_FILE = "scores.json"
TRIGGER_PHRASE = "–í—ã–µ–±–∞—Ç—å –æ–≤–Ω–µ—Ä–∞ –≥–æ–≤–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_scores():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(SCORES_FILE):
        with open(SCORES_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_scores(scores):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤ —Ñ–∞–π–ª"""
    with open(SCORES_FILE, 'w') as f:
        json.dump(scores, f, indent=4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    username = f"@{user.username}" if user.username else user.first_name
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    scores = load_scores()
    user_id = str(user.id)
    if user_id not in scores:
        scores[user_id] = {"score": 0, "username": username}
        save_scores(scores)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
        f"–ü–∏—à–∏ ¬´{TRIGGER_PHRASE}¬ª –¥–ª—è –±–∞–ª–ª–æ–≤.\n"
        "üîù –¢–æ–ø: /top\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã (–∞–¥–º–∏–Ω): /add @username –∏–ª–∏ ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top"""
    scores = load_scores()
    
    if not scores:
        await update.message.reply_text("üì≠ –¢–æ–ø –ø—É—Å—Ç. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –±–∞–ª–ª–∞–º
    sorted_users = sorted(
        scores.items(),
        key=lambda x: x[1]["score"],
        reverse=True
    )[:10]  # –¢–æ–ø-10
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
    
    for i, (user_id, data) in enumerate(sorted_users):
        username = data.get("username", f"ID {user_id}")
        message += f"{medals[i]} {username}: {data['score']} –±–∞–ª–ª–æ–≤\n"
    
    await update.message.reply_text(message)

async def add_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add"""
    if str(update.effective_user.id) != ADMIN_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
        return
    
    try:
        target = context.args[0]
        amount = int(context.args[1])
    except:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add @username –∏–ª–∏ ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "–ü—Ä–∏–º–µ—Ä: /add @tolik_scripter 10"
        )
        return
    
    scores = load_scores()
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = None
    for uid, data in scores.items():
        if target == uid or data.get("username") == target:
            user_id = uid
            break
    
    if not user_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
    scores[user_id]["score"] += amount
    save_scores(scores)
    
    await update.message.reply_text(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {scores[user_id].get('username', user_id)}"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ñ—Ä–∞–∑—ã"""
    if TRIGGER_PHRASE.lower() in update.message.text.lower():
        user = update.effective_user
        user_id = str(user.id)
        username = f"@{user.username}" if user.username else user.first_name
        
        scores = load_scores()
        if user_id not in scores:
            scores[user_id] = {"score": 0, "username": username}
        
        scores[user_id]["score"] += 1
        save_scores(scores)
        
        await update.message.reply_text(
            f"üéâ +1 –±–∞–ª–ª! –¢–≤–æ–π —Å—á–µ—Ç: {scores[user_id]['score']}\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø: /top"
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("add", add_score))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
