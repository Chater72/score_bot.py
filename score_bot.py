import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json
from dotenv import load_dotenv

# 1. –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø ======================================
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π!
ADMIN_ID = int(os.getenv('ADMIN_ID'))  # –í–∞—à ID –≤ Telegram

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render")

# 2. –°–ò–°–¢–ï–ú–ê –ë–ê–õ–õ–û–í ==========================================
SCORES_FILE = "scores.json"

def load_scores():
    try:
        if os.path.exists(SCORES_FILE):
            with open(SCORES_FILE, 'r') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–ª–æ–≤: {e}")
        return {}

def save_scores(scores):
    with open(SCORES_FILE, 'w') as f:
        json.dump(scores, f, indent=4)

# 3. –ö–û–ú–ê–ù–î–ê /add (–ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø) ==========================
async def add_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
        return

    try:
        target = context.args[0]  # –ú–æ–∂–µ—Ç –±—ã—Ç—å @username –∏–ª–∏ ID
        amount = int(context.args[1])
    except:
        await update.message.reply_text("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /add [@—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return

    scores = load_scores()
    updated = False

    # –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É (—Ñ–æ—Ä–º–∞—Ç @username)
    if target.startswith('@'):
        for user_id, data in scores.items():
            if data.get('username') == target:
                scores[user_id]['score'] += amount
                updated = True
                break
    # –ü–æ–∏—Å–∫ –ø–æ ID
    elif target in scores:
        scores[target]['score'] += amount
        updated = True

    if not updated:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    save_scores(scores)
    await update.message.reply_text(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –±–∞–ª–ª–æ–≤ –¥–ª—è {target}")

# 4. –û–°–¢–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ =======================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    username = f"@{user.username}" if user.username else user.first_name

    scores = load_scores()
    if user_id not in scores:
        scores[user_id] = {'username': username, 'score': 0}
        save_scores(scores)

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
        f"–ü–∏—à–∏ ¬´–í—ã–µ–±–∞—Ç—å –æ–≤–Ω–µ—Ä–∞ –≥–æ–≤–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞¬ª –¥–ª—è –±–∞–ª–ª–æ–≤\n"
        "üîù –¢–æ–ø: /top\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã: /add @—é–∑–µ—Ä–Ω–µ–π–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    scores = load_scores()
    if not scores:
        await update.message.reply_text("üì≠ –¢–æ–ø –ø—É—Å—Ç")
        return

    top_users = sorted(scores.items(), key=lambda x: x[1]['score'], reverse=True)[:10]
    response = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n" + "\n".join(
        f"{i+1}. {data['username']}: {data['score']} –±–∞–ª–ª–æ–≤"
        for i, (_, data) in enumerate(top_users)
    )
    await update.message.reply_text(response)

# 5. –ó–ê–ü–£–°–ö –ë–û–¢–ê =============================================
def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("add", add_score))
    
    logger = logging.getLogger(__name__)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
