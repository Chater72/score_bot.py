import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

ADMIN_ID = 8185820733
SCORES_FILE = "scores.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_scores():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–ª–ª—ã –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(SCORES_FILE):
        with open(SCORES_FILE, 'r') as f:
            return json.load(f)
    return {"users": {}}

def save_scores(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–ª–ª—ã –≤ —Ñ–∞–π–ª."""
    with open(SCORES_FILE, 'w') as f:
        json.dump(data, f, indent=4)

async def update_user_data(user_id: str, username: str = None, score_change: int = 0) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_scores()
    normalized_username = username.lower() if username else None
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ ID
    if user_id not in data["users"]:
        data["users"][user_id] = {"score": 0}
    if normalized_username:
        data["users"][user_id]["username"] = normalized_username
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
    if normalized_username:
        if normalized_username not in data["users"]:
            data["users"][normalized_username] = {"id": user_id, "score": 0}
        data["users"][normalized_username]["score"] = data["users"][user_id]["score"] + score_change
    
    # –ò–∑–º–µ–Ω—è–µ–º –±–∞–ª–ª—ã
    data["users"][user_id]["score"] += score_change
    save_scores(data)
    return data["users"][user_id]["score"]

async def top_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top."""
    data = load_scores()
    if not data["users"]:
        await update.message.reply_text("üì≠ –¢–æ–ø –ø—É—Å—Ç.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    unique_users = {}
    for key, user_data in data["users"].items():
        if isinstance(user_data, dict) and "score" in user_data:
            user_id = user_data.get("id", key)
            if user_id not in unique_users:
                unique_users[user_id] = user_data

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–ª–∞–º
    sorted_users = sorted(unique_users.values(), key=lambda x: x["score"], reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    medals = ["ü•á", "ü•à", "ü•â", "üîπ", "üîπ", "üîπ", "üîπ", "üîπ", "üîπ", "üîπ"]
    msg = "üèÜ <b>–¢–æ–ø 10:</b>\n\n"
    
    for i, user in enumerate(sorted_users[:10]):
        display_name = f"@{user['username']}" if user.get("username") else f"ID {user.get('id', '?')}"
        msg += f"{medals[i]} {display_name}: <b>{user['score']}</b> –±–∞–ª–ª–æ–≤\n"
    
    await update.message.reply_text(msg, parse_mode="HTML")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not update.message:
        return

    user = update.message.from_user
    user_id = str(user.id)
    username = f"@{user.username}" if user.username else None

    if "–í—ã–µ–±–∞—Ç—å –æ–≤–Ω–µ—Ä–∞ –≥–æ–≤–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞" in update.message.text:
        new_score = await update_user_data(user_id, username, score_change=1)
        await update.message.reply_text(f"üéâ +1 –±–∞–ª–ª! –¢–≤–æ–π —Å—á—ë—Ç: <b>{new_score}</b>", parse_mode="HTML")

async def add_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add."""
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return

    try:
        target = context.args[0]
        amount = int(context.args[1])
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add @username –∏–ª–∏ ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–±–∞–ª–ª–æ–≤")
        return

    data = load_scores()
    target_data = data["users"].get(target, {})

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∏ —é–∑–µ—Ä–Ω–µ–π–º
    user_id = target_data.get("id", target) if target.startswith("@") else target
    username = target if target.startswith("@") else target_data.get("username")

    new_score = await update_user_data(user_id, username, score_change=amount)
    display_name = username or f"ID {user_id}"
    await update.message.reply_text(
        f"‚úÖ +{amount} –±–∞–ª–ª–æ–≤ –¥–ª—è <b>{display_name}</b>. –ù–æ–≤—ã–π —Å—á—ë—Ç: <b>{new_score}</b>",
        parse_mode="HTML"
    )

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.message.from_user
    user_id = str(user.id)
    username = f"@{user.username}" if user.username else None
    await update_user_data(user_id, username)

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username or '–¥—Ä—É–≥'}!\n\n"
        "–ü–∏—à–∏ ¬´–í—ã–µ–±–∞—Ç—å –æ–≤–Ω–µ—Ä–∞ –≥–æ–≤–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞¬ª –¥–ª—è –±–∞–ª–ª–æ–≤.\n"
        "üîù –¢–æ–ø: /top\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã (–∞–¥–º–∏–Ω): /add @username –∏–ª–∏ ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        parse_mode="HTML"
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    app = Application.builder().token(TELEGRAM_API_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("top", top_handler))
    app.add_handler(CommandHandler("add", add_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
