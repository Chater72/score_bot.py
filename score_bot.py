import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
SCORES_FILE = "scores.json"
TRIGGER_PHRASE = "–í—ã–µ–±–∞—Ç—å –æ–≤–Ω–µ—Ä–∞ –≥–æ–≤–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_scores():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–ª–ª—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(SCORES_FILE):
            with open(SCORES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–ª–æ–≤: {e}")
        return {}

def save_scores(scores):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–ª–ª—ã –≤ —Ñ–∞–π–ª"""
    try:
        with open(SCORES_FILE, 'w', encoding='utf-8') as f:
            json.dump(scores, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def handle_trigger(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω—É—é —Ñ—Ä–∞–∑—É"""
    if TRIGGER_PHRASE.lower() in update.message.text.lower():
        user = update.effective_user
        user_id = str(user.id)
        username = f"@{user.username}" if user.username else user.first_name
        
        scores = load_scores()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in scores:
            scores[user_id] = {"username": username, "score": 0}
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª
        scores[user_id]["score"] += 1
        save_scores(scores)
        
        logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω –±–∞–ª–ª –¥–ª—è {username}. –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç: {scores[user_id]['score']}")
        
        await update.message.reply_text(
            f"üéâ +1 –±–∞–ª–ª! –¢–≤–æ–π —Å—á—ë—Ç: {scores[user_id]['score']}\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø: /top"
        )

async def add_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
        return
    
    try:
        target = context.args[0]  # @username –∏–ª–∏ ID
        amount = int(context.args[1])
    except:
        await update.message.reply_text("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /add [@—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return
    
    scores = load_scores()
    target_found = False
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user_id, data in scores.items():
        if target == data.get("username") or target == user_id:
            data["score"] += amount
            target_found = True
            logger.info(f"–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–∏–ª {amount} –±–∞–ª–ª–æ–≤ –¥–ª—è {target}")
            break
    
    if not target_found:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /add")
        return
    
    save_scores(scores)
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –±–∞–ª–ª–æ–≤ –¥–ª—è {target}")

async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"""
    scores = load_scores()
    
    if not scores:
        await update.message.reply_text("üì≠ –¢–æ–ø –ø—É—Å—Ç")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–ª–∞–º
    top_users = sorted(
        scores.items(),
        key=lambda item: item[1]["score"],
        reverse=True
    )[:10]  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-10
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
    
    for i, (user_id, data) in enumerate(top_users):
        message += f"{medals[i]} {data['username']}: {data['score']} –±–∞–ª–ª–æ–≤\n"
    
    await update.message.reply_text(message)

def main():
    app = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_trigger))
    app.add_handler(CommandHandler("top", show_top))
    app.add_handler(CommandHandler("add", add_score))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
