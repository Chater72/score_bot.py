import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
TOKEN = os.environ.get('TELEGRAM_TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID', 0))

if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Environment Variables –≤ Render")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SCORES_FILE = "scores.json"
TRIGGER_PHRASE = "–í—ã–µ–±–∞—Ç—å –æ–≤–Ω–µ—Ä–∞ –≥–æ–≤–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞"
MEDALS = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_scores():
    try:
        if os.path.exists(SCORES_FILE):
            with open(SCORES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–ª–æ–≤: {e}")
        return {}

def save_scores(scores):
    try:
        with open(SCORES_FILE, 'w', encoding='utf-8') as f:
            json.dump(scores, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    username = f"@{user.username}" if user.username else user.first_name
    
    scores = load_scores()
    if user_id not in scores:
        scores[user_id] = {"username": username, "score": 0}
        save_scores(scores)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
        f"–ü–∏—à–∏ ¬´{TRIGGER_PHRASE}¬ª –¥–ª—è –±–∞–ª–ª–æ–≤.\n"
        "üîù –¢–æ–ø: /top\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã: /add @—é–∑–µ—Ä–Ω–µ–π–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    scores = load_scores()
    if not scores:
        await update.message.reply_text("üì≠ –¢–æ–ø –ø—É—Å—Ç")
        return
    
    top_users = sorted(
        scores.items(),
        key=lambda x: x[1]["score"],
        reverse=True
    )[:10]
    
    response = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, (user_id, data) in enumerate(top_users):
        response += f"{MEDALS[i]} {data['username']}: {data['score']} –±–∞–ª–ª–æ–≤\n"
    
    await update.message.reply_text(response)

async def add_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
        return
    
    try:
        target = context.args[0]
        amount = int(context.args[1])
    except:
        await update.message.reply_text(
            "‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /add [@—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ ID] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]\n"
            "–ü—Ä–∏–º–µ—Ä: /add @tolik_scripter 10"
        )
        return
    
    scores = load_scores()
    updated = False
    
    # –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
    if target.startswith('@'):
        for user_id, data in scores.items():
            if data.get('username') == target:
                scores[user_id]['score'] += amount
                updated = True
                break
    # –ü–æ–∏—Å–∫ –ø–æ ID
    elif target in scores:
        scores[target]['score'] += amount
        updated = True
    
    if not updated:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    save_scores(scores)
    await update.message.reply_text(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –±–∞–ª–ª–æ–≤ –¥–ª—è {target}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if TRIGGER_PHRASE.lower() in update.message.text.lower():
        user = update.effective_user
        user_id = str(user.id)
        username = f"@{user.username}" if user.username else user.first_name
        
        scores = load_scores()
        if user_id not in scores:
            scores[user_id] = {"username": username, "score": 0}
        
        scores[user_id]["score"] += 1
        save_scores(scores)
        
        await update.message.reply_text(
            f"üéâ +1 –±–∞–ª–ª! –¢–≤–æ–π —Å—á–µ—Ç: {scores[user_id]['score']}\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø: /top"
        )

def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("add", add_score))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    app.run_polling()

if __name__ == "__main__":
    main()
